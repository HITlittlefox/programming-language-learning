package chap6.seqstack2maze;
public class Mazeunit {
    int i; // 当前方块的行号
    int j; // 当前方块的列号
    int di; // 下一个可走方块的方位号

    public Mazeunit() {
        this(0, 0, -1);
    }

    public Mazeunit(int i, int j, int di) {
        this.i = i;
        this.j = j;
        this.di = di;
    }
}

// 现求解图-1所示迷宫从(1,1)到(M，N)路径的过程是：
// 先将入口进栈(并将初始方位设定为-1)，在栈不空时循环：
// 取栈顶方块(不退栈)，若该方块是出口，则输出栈中方块即为路径。
// 否则，找下一个可走的相邻方块，若不存在这样的方块，则退栈。
// 若存在这样的方块，则将其方位保存到栈顶元素中,并将这个可走的相邻方块进栈(初始方位设置为-1)。
// 要特别注意，为了保证试探的可走相邻方块不是已走路径上的方块，
// 如(i,j)已进栈，在试探(i+1，j)的下一可走方块时，又试探到(i，j)，
// 这样可能会引起死循环，为此，在一个方块进栈后，将对应的mg数组元素值改为-1(变为不可走的相邻方块)，
// 当退栈时(表示没有可走相邻方块)，将其恢复为0。
